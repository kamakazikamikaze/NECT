from collections import defaultdict
from weakref import WeakSet
from weakreflist import WeakList
import pytz


class ConfigItem(object):

    def __init__(self, **kwargs):
        for arg, val in kwargs.iteritems():
            setattr(self, arg, val)

    def __repr__(self):
        return "<" + self.__class__.__name__ + ">"


# Equipment

# TODO: Add ports
class Device(ConfigItem):
    r"""
    Layer 2/3 device, such as a Switch, Router, Firewall, etc.
    """


# TODO: Require stack number to be passed; Port is then assigned to each device
class Host(ConfigItem):
    r"""
    Logical representation of a multi-device stack
    """

    def __init__(self, name='AutoGenerated', devices=[], **kwargs):
        devices = WeakList(devices)
        kwargs.update({'hostname': name, 'devices': devices})
        super(Host, self).__init__(**kwargs)
        self.items = defaultdict(list)

    def __getitem__(self, item):
        return self.items[item]

    def __repr__(self):
        return ('<Host name="' + str(self.name) + '" devices=' +
                str(len(self.devices)) + '>')

    def add_device(self, device, member=None):
        if member and member <= len(self.devices):
            self.devices.insert(member, device)
        else:
            self.devices.append(device)


# Interfaces

class Interface(ConfigItem):
    r"""
    Base class for all configurable Layer 2 and 3 objects that deal with
    logical data flow
    """

    def __init__(self, name, **kwargs):
        kwargs.update({'name': name})
        super(Interface, self).__init__(**kwargs)

    def __repr__(self):
        return '<Interface name="' + str(self.name) + '">'


class VLAN(Interface):
    r"""
    VLAN definitions and configuration
    """

    def __init__(self, number=1, name=None, address=None, mask=None,
                 ports=None, **kwargs):
        kwargs.update(locals())
        del kwargs['self']
        del kwargs['kwargs']
        super(VLAN, self).__init__(**kwargs)
        if not ports:
            self.ports = {}
        self.ports['tagged'] = WeakSet()
        self.ports['untagged'] = WeakSet()

    def __repr__(self):
        metadata = ['number', 'name', 'id_addr', 'subnet_mask']
        buildstr = []
        for meta in metadata:
            try:
                m = getattr(self, meta)
                if m:
                    buildstr.append(meta + '="' + str(m) + '"')
            except AttributeError:
                pass
        return '<VLAN ' + ' '.join(buildstr) + '>'

    def add_port(self, port, tagging=('untagged',)):
        r"""
        Declare that a VLAN is to be (un)tagged on the given port

        :param Port port: Port object to associate to
        :param tagging: 'tagged', 'untagged', or both in an iterative object
        :type tagging: str, iter(str)
        """

        if not tagging:
            tagging = ('untagged', )
        elif isinstance(tagging, str):
            tagging = (tagging, )
        for tag in tagging:
            self.ports[tag].add(port)

    def del_port(self, port, tagging=('tagged', 'untagged')):
        r"""
        Declare that a VLAN is no longer (un)tagged on the given port.

        :param Port port: Port object to disassociate from
        :param tagging: 'tagged', 'untagged', or both in an iterative object
        :type tagging: str or iter(str)
        """

        if isinstance(tagging, str):
            tagging = (tagging, )
        for tag in tagging:
            try:
                self.ports[tag].remove(port)
            except ValueError:
                pass


class Port(Interface):
    r"""
    Physical Interface
    """

    def __init__(self, name, number, enabled=False, description=None,
                 speed=1000, speed_mode='auto', duplex='auto', vlans=None,
                 address=None, mask=None, **kwargs):
        # Lazy parameter setting
        kwargs.update(locals())
        del kwargs['self']
        del kwargs['kwargs']
        super(Port, self).__init__(**kwargs)
        if not self.vlans:
            self.vlans = {}
        self.vlans['tagged'] = WeakSet()
        self.vlans['untagged'] = WeakSet()

    def add_vlan(self, vlan, tagging=('untagged',)):
        r"""
        Set a Vlan to be (un)tagged for this Port.

        :param vlan:
        :param tagging:
        """
        if isinstance(tagging, str):
            tagging = (tagging, )
        for tag in tagging:
            self.vlans[tag].add(vlan)

    def del_vlan(self, vlan, tagging=('tagged', 'untagged')):
        r"""
        Set a Vlan to be (un)tagged for this Port.

        :param vlan:
        :param tagging:
        """
        if isinstance(tagging, str):
            tagging = (tagging, )
        for tag in tagging:
            try:
                self.vlans[tag].remove(vlan)
            except ValueError:
                pass

    def set_ip(self, address, mask):
        self.address = address
        self.mask = mask


class LinkAgg(Interface):
    r"""
    LACP, PAgP, plain Etherchannel, etc.
    """

    def __init__(self, name, members):
        kwargs = locals()
        del kwargs['self']
        super(LinkAgg, self).__init__(**kwargs)


class Mgmt(Interface):
    r"""
    Stub
    """


class Line(Mgmt):

    def __init__(self, enabled=True, timeout=300, usb=False, baud=None):
        kwargs = locals()
        del kwargs['self']
        super(Line, self).__init__(**kwargs)


class OOBM(Mgmt):
    r"""
    Out-of-band Management interface configuration
    """


class Web(Mgmt):
    r"""
    Web UI
    """

    def __init__(self, enabled=False, secure=False):
        kwargs = locals()
        del kwargs['self']
        super(Web, self).__init__(**kwargs)


# IP


class IP(ConfigItem):
    r"""
    IP settings
    """

    def __init__(self, **kwargs):
        super(IP, self).__init__(**kwargs)


class IPv6(ConfigItem):
    r"""
    """


class DNS(IP):
    r"""
    Domain settings
    """

    def __init__(self, domain_name, servers=None, domain_list=None):
        kwargs = locals()
        del kwargs['self']
        super(DNS, self).__init__(**kwargs)


# Auth


class Auth(ConfigItem):
    r"""
    Stub
    """


class AAA(Auth):
    r"""
    Authentication, Authorization, and Accounting objects
    """

    def __init__(self, authentication, authorization, accounting):
        kwargs = locals()
        del kwargs['self']
        super(AAA, self).__init__(**kwargs)


class TACACS(Auth):
    r"""
    """

    def __init__(self, servers=None, key='', timeout=1):
        kwargs = locals()
        del kwargs['self']
        super(TACACS, self).__init__(**kwargs)
        self.servers = servers if servers else []
        self.key = key
        self.timeout = timeout


class RADIUS(Auth):
    r"""
    Stub
    """


class Password(Auth):
    r"""
    Non-user password for securing CLI access at any endpoint
    """
    def __init__(self, password, encryption=None, privilege=None, **kwargs):
        kwargs.update(locals())
        del kwargs['self']
        del kwargs['kwargs']
        super(Password, self).__init__(**kwargs)


class User(Password):
    def __init__(self, username, *args, **kwargs):
        kwargs.update({'username': username})
        super(User, self).__init__(*args, **kwargs)


# Logging


class Logging(ConfigItem):
    r"""
    Logging settings and services
    """

    def __init__(self, levels=None, **kwargs):
        kwargs.update({'levels': levels if levels else []})
        super(Logging, self).__init__(**kwargs)
        
        
class LocalLogging(ConfigItem):
    r"""
    In-buffer or to-local-disk logging
    """


class LogServer(Logging):
    r"""
    Logging servers and preferences
    """

    def __init__(self, address, name=None, port=None, proto=None):
        kwargs = locals()
        del kwargs['self']
        super(LogServer, self).__init__(**kwargs)


# Advanced switching and port security

class LANSecurity(ConfigItem):
    r"""
    General L2 and L3 security parameters
    """


class DHCPSnooping(LANSecurity):

    def __init__(self, enabled, vlans, ports):
        kwargs = locals()
        del kwargs['self']
        super(DHCPSnooping, self).__init__(**kwargs)


class ErrorDisable(LANSecurity):
    r"""
    Allowed means of recovery from ports that are error-disabled
    """

# SNMP


class SNMP(ConfigItem):
    r"""
    Pass
    """


class SNMPServer(SNMP):
    r"""
    """

    def __init__(self, ip, community):
        kwargs = locals()
        del kwargs['self']
        super(SNMPServer, self).__init__(**kwargs)


class SNMPCommunity(SNMP):
    r"""
    """

    def __init__(self, community, permissions='ro'):
        kwargs = locals()
        del kwargs['self']
        super(SNMP, self).__init__(**kwargs)


class SNMPTraps(SNMP):
    r"""
    """

    def __init__(self, traps=None):
        kwargs = locals()
        del kwargs['self']
        super(SNMP, self).__init__(**kwargs)


# Spanning Tree


class Discovery(ConfigItem):
    r"""
    Stub
    """


class STP(Discovery):
    r"""
    Spanning-tree protocol
    """


class CDP(Discovery):
    r"""
    Cisco Discovery Protocol preferences
    """

    def __init__(self, enabled=False):
        kwargs = locals()
        del kwargs['self']
        super(CDP, self).__init__(**kwargs)


class LLDP(Discovery):
    r"""
    Link-Layer Discovery Protocol preferences
    """

    def __init__(self, enabled=False):
        kwargs = locals()
        del kwargs['self']
        super(LLDP, self).__init__(**kwargs)


# Time

class Time(ConfigItem):
    r"""
    Local time options
    """

    def __init__(self, zone, offset=None, dst=None):
        kwargs = locals()
        del kwargs['self']
        super(Time, self).__init__(**kwargs)


class NTP(ConfigItem):
    r"""
    (S)NTP preferences
    """

    def __init__(self, address, name='NTP', proto=None):
        kwargs = locals()
        del kwargs['self']
        super(NTP, self).__init__(**kwargs)

# Quirks


class Banner(ConfigItem):
    r"""
    Login, MOTD, or Logout messages for legal reasons
    """

    def __init__(self, message, when):
        # when is any of ['connect', 'login', 'logout']
        kwargs = locals()
        del kwargs['self']
        super(Banner, self).__init__(**kwargs)
        

class NotConvertible(ConfigItem):
    r"""
    Commands that are either vendor-proprietary or are not directly
    translatable
    """

    def __init__(self, commands=None, **kwargs):
        kwargs.update(locals())
        del kwargs['self']
        del kwargs['kwargs']
        super(NotConvertible, self).__init__(**kwargs)


class Alias(NotConvertible):
    r"""
    Alias commands
    
    Every vendor has the ability to create aliases, but sadly they are not
    directly convertible. However, since they can be used across models from
    the same vendor, we can include them 
    """


class Service(NotConvertible):
    r"""
    Potentially convertible, but still vendor-specific
    """
